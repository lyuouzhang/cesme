## Quantile discriminant analysis
knitr::opts_chunk$set(echo = TRUE)
abline(cf, lty=2)
```{r code, echo=FALSE}
```{r, results='hide'}
sum(y == 1 & x > thres) / sum(y == 1)
# sample size
n = 200
# prop of positive class
prop = 0.1
s_x = 0.6
n_plus = prop * 200
x_neg = rnorm(n - n_plus, -1, s_x)
x_pos = rnorm(n_plus, 1, s_x)
y = c(rep(-1, n - n_plus), rep(1, n_plus))
x = c(x_neg, x_pos)
plot(x, y, col="white")
library(quantreg)
rqclas = rq(y ~ x, tau=1-prop)
cf = coef(rqclas)
thres = -cf[1] / cf[2]
sensitivity = sum(y == 1 & x > thres) / sum(y == 1)
sensitivity
---
title: "quantile classifier"
output: html_document
---
## Quantile discriminant analysis
Model:
$$
X | Y = -1 \sim N(-1, \sigma^2).
$$
$$
X | Y = 1 \sim N(1, \sigma^2).
$$
Minority proportion is $\pi$.
Fit $1 - \pi$ quantile of Y against X $Q_{1-\pi}(Y|X)$. Classify $X$ as $Y = 1$ if $Q_{1-\pi}(Y|X) > 0$.
```{r, message=FALSE}
# sample size
n = 200
# prop of positive class
prop = 0.3
s_x = 0.6
n_plus = prop * 200
x_neg = rnorm(n - n_plus, -1, s_x)
x_pos = rnorm(n_plus, 1, s_x)
y = c(rep(-1, n - n_plus), rep(1, n_plus))
x = c(x_neg, x_pos)
plot(x, y, col="white")
library(quantreg)
rqclas = rq(y ~ x, tau=1-prop)
cf = coef(rqclas)
thres = -cf[1] / cf[2]
pred = x<thres
points(x, y, col=pred+1, pch=c(1,2)[factor(y)])
abline(cf, lty=2)
abline(v=thres, lwd=2)
title(paste("minority proportion is", prop))
```
```{r, echo=FALSE, message=FALSE}
# sample size
n = 200
# prop of positive class
prop = 0.2
s_x = 0.6
n_plus = prop * 200
x_neg = rnorm(n - n_plus, -1, s_x)
x_pos = rnorm(n_plus, 1, s_x)
y = c(rep(-1, n - n_plus), rep(1, n_plus))
x = c(x_neg, x_pos)
plot(x, y, col="white")
library(quantreg)
rqclas = rq(y ~ x, tau=1-prop)
cf = coef(rqclas)
thres = -cf[1] / cf[2]
pred = x<thres
points(x, y, col=pred+1, pch=c(1,2)[factor(y)])
abline(cf, lty=2)
abline(v=thres, lwd=2)
title(paste("minority proportion is", prop))
```
```{r, echo=FALSE, message=FALSE}
# sample size
n = 200
# prop of positive class
prop = 0.1
s_x = 0.6
n_plus = prop * 200
x_neg = rnorm(n - n_plus, -1, s_x)
x_pos = rnorm(n_plus, 1, s_x)
y = c(rep(-1, n - n_plus), rep(1, n_plus))
x = c(x_neg, x_pos)
plot(x, y, col="white")
library(quantreg)
rqclas = rq(y ~ x, tau=1-prop)
cf = coef(rqclas)
thres = -cf[1] / cf[2]
sensitivity = sum(y == 1 & x > thres) / sum(y == 1)
specificity = sum(y == -1 & x <= thres) / sum(y == -1)
pred = x<thres
points(x, y, col=pred+1, pch=c(1,2)[factor(y)])
abline(cf, lty=2)
abline(v=thres, lwd=2)
title(paste("minority proportion is", prop))
```
library(profvis)
install.packages("profvis")
rm(list=ls())
library(MASS)
library(msda)
library(gtools)
setwd("~/Dropbox/Programming/GitHub/cesme/src")
system("R CMD SHLIB cesme.f90 -o cesme.so")
dyn.load("cesme.so")
source("~/Dropbox/Programming/GitHub/cesme/R/Rfunc.R")
nrep = 100
K = 4
n1 = 100
n2 = 100
n3 = 100
n4 = 100
n = n1+n2+n3+n4
#n=n1+n2
p = 50
s = 3
true.label = rep(c(1:K),c(n1,n2,n3,n4))
#true.label = rep(c(1:K),c(n1,n2))
gamma1.star=c(rep(1,s),rep(0,p-s))*2.5
gamma2.star=c(rep(0,s),rep(1,s),rep(0,p-2*s))*2.5
gamma3.star=c(rep(0,2*s),rep(1,s),rep(0,p-3*s))*2.5
sigma.inv=0.8^abs(outer(c(1:p), c(1:p), '-'))
sigma.star=solve(sigma.inv)
mu.star=cbind(mu1=sigma.star%*%(gamma1.star+gamma2.star+gamma3.star),
mu2=-sigma.star%*%gamma1.star,mu3=-sigma.star%*%gamma2.star,
mu4=-sigma.star%*%gamma3.star)
profvis({
npn.single(mu.star=mu.star, sigma.star=sigma.star, K=K, p=p, n=n, N=100, seed=1)
})
rm(list=ls())
library(MASS)
library(msda)
library(gtools)
library(profvis)
setwd("~/Dropbox/Programming/GitHub/cesme/src")
system("R CMD SHLIB cesme.f90 -o cesme.so")
dyn.load("cesme.so")
source("~/Dropbox/Programming/GitHub/cesme/R/Rfunc.R")
nrep = 100
K = 4
n1 = 100
n2 = 100
n3 = 100
n4 = 100
n = n1+n2+n3+n4
#n=n1+n2
p = 50
s = 3
true.label = rep(c(1:K),c(n1,n2,n3,n4))
#true.label = rep(c(1:K),c(n1,n2))
gamma1.star=c(rep(1,s),rep(0,p-s))*2.5
gamma2.star=c(rep(0,s),rep(1,s),rep(0,p-2*s))*2.5
gamma3.star=c(rep(0,2*s),rep(1,s),rep(0,p-3*s))*2.5
sigma.inv=0.8^abs(outer(c(1:p), c(1:p), '-'))
sigma.star=solve(sigma.inv)
mu.star=cbind(mu1=sigma.star%*%(gamma1.star+gamma2.star+gamma3.star),
mu2=-sigma.star%*%gamma1.star,mu3=-sigma.star%*%gamma2.star,
mu4=-sigma.star%*%gamma3.star)
profvis({
npn.single(mu.star=mu.star, sigma.star=sigma.star, K=K, p=p, n=n, N=100, seed=1)
})
# rm(list=ls())
# setwd("~/Dropbox/Programming/GitHub/")
# system("R CMD build ~/Dropbox/Programming/GitHub/cesme/")
# system("R CMD INSTALL ~/Dropbox/Programming/GitHub/cesme/")
rm(list=ls())
library(MASS)
library(msda)
library(gtools)
library(profvis)
setwd("~/Dropbox/Programming/GitHub/cesme/src")
system("R CMD SHLIB cesme.f90 -o cesme.so")
dyn.load("cesme.so")
source("~/Dropbox/Programming/GitHub/cesme/R/Rfunc.R")
nrep = 100
K = 4
n1 = 100
n2 = 100
n3 = 100
n4 = 100
n = n1+n2+n3+n4
#n=n1+n2
p = 50
s = 3
true.label = rep(c(1:K),c(n1,n2,n3,n4))
#true.label = rep(c(1:K),c(n1,n2))
gamma1.star=c(rep(1,s),rep(0,p-s))*2.5
gamma2.star=c(rep(0,s),rep(1,s),rep(0,p-2*s))*2.5
gamma3.star=c(rep(0,2*s),rep(1,s),rep(0,p-3*s))*2.5
sigma.inv=0.8^abs(outer(c(1:p), c(1:p), '-'))
sigma.star=solve(sigma.inv)
mu.star=cbind(mu1=sigma.star%*%(gamma1.star+gamma2.star+gamma3.star),
mu2=-sigma.star%*%gamma1.star,mu3=-sigma.star%*%gamma2.star,
mu4=-sigma.star%*%gamma3.star)
profvis({
npn.single(mu.star=mu.star, sigma.star=sigma.star, K=K, p=p, n=n, N=20, seed=1)
})
